/**
 * Hue 2 Configuration
 * Generated by Base App template
 */

// Environment-specific configuration
export const ENV_CONFIG = {
  development: {
    apiUrl: 'https://127.0.0.1:8000',
    logLevel: 'debug' as const,
    enableDevTools: true,
  },
  staging: {
    apiUrl: process.env.EXPO_PUBLIC_STAGING_API_URL || '',
    logLevel: 'info' as const,
    enableDevTools: true,
  },
  production: {
    apiUrl: process.env.EXPO_PUBLIC_API_URL || '',
    logLevel: 'error' as const,
    enableDevTools: false,
  },
} as const;

// App branding and identity
export const BRANDING_CONFIG = {
  appName: 'Hue 2',
  displayName: 'Hue 2',
  description: 'A modern habit tracking app with beautiful design and powerful analytics',
  version: '1.0.0',
  company: 'Adrien Ecoffet',
  website: 'https://yourcompany.com',
  supportEmail: 'support@yourcompany.com',

  // App store information
  appStoreId: '',
  playStoreId: '',

  // Deep linking
  scheme: 'hue2',
  universalLinks: [],
} as const;

// UI/UX Configuration
export const UI_CONFIG = {
  theme: {
    // Primary brand colors - customize these for your app
    primaryColor: '#0a7ea4',
    primaryColorDark: '#ffffff',

    // Color palette
    colors: {
      light: {
        text: '#11181C',
        background: '#fff',
        tint: '#0a7ea4',
        icon: '#687076',
        tabIconDefault: '#687076',
        tabIconSelected: '#0a7ea4',
        border: '#e1e5e9',
        card: '#ffffff',
        surface: '#f8f9fa',
        error: '#dc3545',
        warning: '#ffc107',
        success: '#28a745',
        info: '#17a2b8',
      },
      dark: {
        text: '#ECEDEE',
        background: '#151718',
        tint: '#ffffff',
        icon: '#9BA1A6',
        tabIconDefault: '#9BA1A6',
        tabIconSelected: '#ffffff',
        border: '#333333',
        card: '#1e1e1e',
        surface: '#2a2a2a',
        error: '#dc3545',
        warning: '#ffc107',
        success: '#28a745',
        info: '#17a2b8',
      },
    },

    // Typography
    fonts: {
      regular: 'System',
      medium: 'System',
      bold: 'System',
    },

    // Spacing scale
    spacing: {
      xs: 4,
      sm: 8,
      md: 16,
      lg: 24,
      xl: 32,
      xxl: 48,
    },

    // Border radius scale
    borderRadius: {
      sm: 4,
      md: 8,
      lg: 12,
      xl: 20,
      full: 9999,
    },
  },

  // Layout configuration
  layout: {
    maxContentWidth: 800,
    headerHeight: 60,
    tabBarHeight: 80,
    safeAreaPadding: 16,
  },

  // Animation settings
  animation: {
    enableAnimations: true,
    duration: {
      fast: 150,
      normal: 300,
      slow: 500,
    },
    easing: 'ease-in-out',
  },

  // Accessibility
  accessibility: {
    enableHighContrast: false,
    enableReducedMotion: false,
    minimumTouchTarget: 44,
  },
} as const;

// Feature flags - enable/disable features for your app
export const FEATURE_FLAGS = {
  // Authentication features
  enableAuth: true,
  enableSocialLogin: true,
  enableBiometricAuth: false,
  enableGuestMode: false,

  // Core features
  enableProfilePictures: true,
  enableUserSettings: true,
  enableDarkMode: true,
  enableOfflineMode: true,

  // Social features
  enableUserProfiles: false,
  enableMessaging: false,
  enableSocialSharing: false,
  enableComments: false,

  // Monetization
  enableInAppPurchases: false,
  enableSubscriptions: false,
  enableAdvertisements: false,

  // Advanced features
  enablePushNotifications: false,
  enableAnalytics: false,
  enableCrashReporting: false,
  enableLocationServices: false,
  enableCamera: false,
  enableFileUpload: true,

  // Development features
  enableDebugMode: __DEV__,
  enablePerformanceMonitoring: false,
  enableRemoteConfig: false,
} as const;

// API and service configuration
export const SERVICE_CONFIG = {
  api: {
    timeout: 10000,
    retryAttempts: 3,
    retryDelay: 1000,
    enableCaching: true,
    cacheExpiration: 5 * 60 * 1000, // 5 minutes
  },

  auth: {
    provider: 'auth0' as const,
    auth0: {
      domain: process.env.EXPO_PUBLIC_AUTH0_DOMAIN || '',
      clientId: process.env.EXPO_PUBLIC_AUTH0_CLIENT_ID || '',
      audience: process.env.EXPO_PUBLIC_AUTH0_AUDIENCE || '',
    },
    tokenStorage: 'secure' as const,
    autoRefresh: true,
    refreshThreshold: 5 * 60 * 1000,
  },

  storage: {
    provider: 'asyncStorage' as const,
    encryption: false,
    compression: false,
  },

  notifications: {
    provider: 'expo' as const,
    enableBadges: true,
    enableSounds: true,
    enableVibration: true,
  },

  analytics: {
    provider: 'none' as const,
    enableAutoTracking: false,
    enableCrashlytics: false,
  },

  storage_uploads: {
    provider: 's3' as const,
    maxFileSize: 10 * 1024 * 1024, // 10MB
    allowedTypes: ['image/jpeg', 'image/png', 'image/gif'],
  },
} as const;

// Navigation configuration
export const NAVIGATION_CONFIG = {
  tabBar: {
    showLabels: true,
    activeTintColor: UI_CONFIG.theme.colors.light.tabIconSelected,
    inactiveTintColor: UI_CONFIG.theme.colors.light.tabIconDefault,
    style: {
      height: UI_CONFIG.layout.tabBarHeight,
    },
  },

  screens: {
    home: { enabled: true, icon: 'house', title: 'Home' },
    explore: { enabled: true, icon: 'paperplane', title: 'Explore' },
    profile: { enabled: true, icon: 'person', title: 'Profile' },
    settings: { enabled: true, icon: 'gear', title: 'Settings' },
  },

  linking: {
    prefixes: ['hue2://'],
    config: {
      screens: {
        Home: '/',
        Settings: '/settings',
        Profile: '/profile',
      },
    },
  },
} as const;

// Get current environment
const getCurrentEnvironment = (): keyof typeof ENV_CONFIG => {
  if (__DEV__) return 'development';
  if (process.env.EXPO_PUBLIC_ENVIRONMENT === 'staging') return 'staging';
  return 'production';
};

// Main configuration object
export const APP_CONFIG = {
  environment: getCurrentEnvironment(),
  env: ENV_CONFIG[getCurrentEnvironment()],
  branding: BRANDING_CONFIG,
  ui: UI_CONFIG,
  features: FEATURE_FLAGS,
  services: SERVICE_CONFIG,
  navigation: NAVIGATION_CONFIG,
} as const;

// Type exports
export type AppConfig = typeof APP_CONFIG;
export type FeatureFlags = typeof FEATURE_FLAGS;
export type UIConfig = typeof UI_CONFIG;
export type ServiceConfig = typeof SERVICE_CONFIG;

// Helper functions
export const isFeatureEnabled = (feature: keyof typeof FEATURE_FLAGS): boolean => {
  return FEATURE_FLAGS[feature] as boolean;
};

export const getApiUrl = (): string => {
  return APP_CONFIG.env.apiUrl;
};

export const getAppName = (): string => {
  return BRANDING_CONFIG.appName;
};

export const getThemeColors = (isDark: boolean = false) => {
  return isDark ? UI_CONFIG.theme.colors.dark : UI_CONFIG.theme.colors.light;
};
